// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name ChatBotSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import Combine
import DeveloperToolsSupport
import Foundation
import MobileCoreServices
import PhotosUI
import SocketIO
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
public struct WotNotTheme {
  public let primaryColor: SwiftUICore.Color
  public let primaryDarkColor: SwiftUICore.Color
  public let accentColor: SwiftUICore.Color
  public let backgroundColor: SwiftUICore.Color
  public let surfaceColor: SwiftUICore.Color
  public let cardBackgroundColor: SwiftUICore.Color
  public let textPrimaryColor: SwiftUICore.Color
  public let textSecondaryColor: SwiftUICore.Color
  public let textHintColor: SwiftUICore.Color
  public let textWhiteColor: SwiftUICore.Color
  public let botMessageBackgroundColor: SwiftUICore.Color
  public let botMessageTextColor: SwiftUICore.Color
  public let visitorMessageBackgroundColor: SwiftUICore.Color
  public let visitorMessageTextColor: SwiftUICore.Color
  public let assigneeBannerBackgroundColor: SwiftUICore.Color
  public let assigneeBannerTextColor: SwiftUICore.Color
  public let onlineStatusColor: SwiftUICore.Color
  public let offlineStatusColor: SwiftUICore.Color
  public let typingIndicatorColor: SwiftUICore.Color
  public let inputBackgroundColor: SwiftUICore.Color
  public let inputTextColor: SwiftUICore.Color
  public let inputHintColor: SwiftUICore.Color
  public let inputBorderColor: SwiftUICore.Color
  public let buttonBackgroundColor: SwiftUICore.Color
  public let buttonTextColor: SwiftUICore.Color
  public let buttonDisabledBackgroundColor: SwiftUICore.Color
  public let buttonDisabledTextColor: SwiftUICore.Color
  public let dividerColor: SwiftUICore.Color
  public let cornerRadius: CoreFoundation.CGFloat
  public let messageCornerRadius: CoreFoundation.CGFloat
  public let textSizeSmall: CoreFoundation.CGFloat
  public let textSizeMedium: CoreFoundation.CGFloat
  public let textSizeLarge: CoreFoundation.CGFloat
  public let textSizeXLarge: CoreFoundation.CGFloat
  public let spacingSmall: CoreFoundation.CGFloat
  public let spacingMedium: CoreFoundation.CGFloat
  public let spacingLarge: CoreFoundation.CGFloat
  public let spacingXLarge: CoreFoundation.CGFloat
  public let avatarSize: CoreFoundation.CGFloat
  public let avatarSizeLarge: CoreFoundation.CGFloat
  public let animationDuration: Swift.Double
  public init(primaryColor: SwiftUICore.Color = Color(red: 42/255, green: 124/255, blue: 255/255), primaryDarkColor: SwiftUICore.Color = Color(red: 0/255, green: 86/255, blue: 204/255), accentColor: SwiftUICore.Color = Color(red: 255/255, green: 59/255, blue: 48/255), backgroundColor: SwiftUICore.Color = Color.white, surfaceColor: SwiftUICore.Color = Color.white, cardBackgroundColor: SwiftUICore.Color = Color.white, textPrimaryColor: SwiftUICore.Color = Color(red: 28/255, green: 28/255, blue: 30/255), textSecondaryColor: SwiftUICore.Color = Color(red: 142/255, green: 142/255, blue: 147/255), textHintColor: SwiftUICore.Color = Color(red: 199/255, green: 199/255, blue: 204/255), textWhiteColor: SwiftUICore.Color = Color.white, botMessageBackgroundColor: SwiftUICore.Color = Color(red: 242/255, green: 245/255, blue: 248/255), botMessageTextColor: SwiftUICore.Color = Color.black, visitorMessageBackgroundColor: SwiftUICore.Color = Color(red: 42/255, green: 124/255, blue: 255/255), visitorMessageTextColor: SwiftUICore.Color = Color.white, assigneeBannerBackgroundColor: SwiftUICore.Color = Color(red: 254/255, green: 240/255, blue: 199/255), assigneeBannerTextColor: SwiftUICore.Color = Color(red: 78/255, green: 29/255, blue: 9/255), onlineStatusColor: SwiftUICore.Color = Color(red: 52/255, green: 199/255, blue: 89/255), offlineStatusColor: SwiftUICore.Color = Color(red: 255/255, green: 59/255, blue: 48/255), typingIndicatorColor: SwiftUICore.Color = Color(red: 0/255, green: 122/255, blue: 255/255), inputBackgroundColor: SwiftUICore.Color = Color.white, inputTextColor: SwiftUICore.Color = Color(red: 28/255, green: 28/255, blue: 30/255), inputHintColor: SwiftUICore.Color = Color(red: 142/255, green: 142/255, blue: 147/255), inputBorderColor: SwiftUICore.Color = Color(red: 199/255, green: 199/255, blue: 204/255), buttonBackgroundColor: SwiftUICore.Color = Color(red: 0/255, green: 122/255, blue: 255/255), buttonTextColor: SwiftUICore.Color = Color.white, buttonDisabledBackgroundColor: SwiftUICore.Color = Color(red: 199/255, green: 199/255, blue: 204/255), buttonDisabledTextColor: SwiftUICore.Color = Color(red: 142/255, green: 142/255, blue: 147/255), dividerColor: SwiftUICore.Color = Color(red: 199/255, green: 199/255, blue: 204/255), cornerRadius: CoreFoundation.CGFloat = 12, messageCornerRadius: CoreFoundation.CGFloat = 18, textSizeSmall: CoreFoundation.CGFloat = 12, textSizeMedium: CoreFoundation.CGFloat = 14, textSizeLarge: CoreFoundation.CGFloat = 16, textSizeXLarge: CoreFoundation.CGFloat = 18, spacingSmall: CoreFoundation.CGFloat = 8, spacingMedium: CoreFoundation.CGFloat = 16, spacingLarge: CoreFoundation.CGFloat = 24, spacingXLarge: CoreFoundation.CGFloat = 32, avatarSize: CoreFoundation.CGFloat = 40, avatarSizeLarge: CoreFoundation.CGFloat = 60, animationDuration: Swift.Double = 0.3)
  public static func defaultLight() -> ChatBotSDK.WotNotTheme
  public static func defaultDark() -> ChatBotSDK.WotNotTheme
}
public struct CreateConversationRequest : Swift.Codable {
  public let userId: Swift.String
  public let botId: Swift.String
  public let title: Swift.String?
  public let metadata: [Swift.String : ChatBotSDK.AnyCodable]?
  public init(userId: Swift.String, botId: Swift.String, title: Swift.String? = nil, metadata: [Swift.String : Any]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SendMessageRequest : Swift.Codable {
  public let content: Swift.String
  public let type: ChatBotSDK.MessageType
  public let senderId: Swift.String
  public let metadata: [Swift.String : ChatBotSDK.AnyCodable]?
  public init(content: Swift.String, type: ChatBotSDK.MessageType = .text, senderId: Swift.String, metadata: [Swift.String : Any]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MessageHistoryData : Swift.Codable {
  public let messages: [ChatBotSDK.ParsedMessage]
  public let hasMore: Swift.Bool
  public var nextSearchAfter: Swift.String?
  public let users: [Swift.String : ChatBotSDK.MessageUser]?
  public let assignee: ChatBotSDK.MessageAssignee?
  public let conversationKey: Swift.String?
  public init(from decoder: any Swift.Decoder, conversationKey: Swift.String? = nil) throws
  public init(from data: Foundation.Data, conversationKey: Swift.String?) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MessageUser : Swift.Codable {
  public let name: Swift.String
  public let email: Swift.String
  public let userTypeId: Swift.Int
  public let userType: Swift.String
  public let imageUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AgentAssignmentData : Swift.Codable {
  public let assigned: ChatBotSDK.AssignedData?
  public let timestamp: Swift.String?
  public let readByVisitorAt: Swift.String?
  public let agentDetails: [Swift.String]?
  public let statusChat: Swift.String?
  public let workingHoursMatched: [Swift.String]?
  public let agentWorkingHourTime: Swift.String?
  public let failureReason: Swift.String?
  public let assignmentReason: Swift.String?
  public let assigneeProcessTime: Swift.String?
  public let eventTypeId: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AssignedData : Swift.Codable {
  public let by: ChatBotSDK.AssignmentByData?
  public let to: ChatBotSDK.AssignmentToData?
  public let assignmentOrigin: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AssignmentByData : Swift.Codable {
  public let createdBy: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AssignmentToData : Swift.Codable {
  public let createdBy: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RawApiMessage : Swift.Codable {
  public let agent: ChatBotSDK.AgentMessage?
  public let user: ChatBotSDK.UserMessage?
  public let bot: ChatBotSDK.BotMessage?
  public let visitor: ChatBotSDK.VisitorMessage?
  public let agentAssignment: ChatBotSDK.AgentAssignmentData?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ApiMessageStatus : Swift.Codable {
  public let id: Swift.Int
  public let name: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AgentMessage : Swift.Codable {
  public let timestamp: Swift.String
  public let createdBy: Swift.String
  public let message: ChatBotSDK.MessageContent?
  public let eventTypeId: Swift.String?
  public let status: ChatBotSDK.ApiMessageStatus?
  public let readByVisitorAt: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserMessage : Swift.Codable {
  public let timestamp: Swift.String
  public let createdBy: Swift.String?
  public let message: ChatBotSDK.MessageContent?
  public let eventTypeId: Swift.String?
  public let readByVisitorAt: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BotMessage : Swift.Codable {
  public let timestamp: Swift.String
  public let createdBy: Swift.String
  public let message: ChatBotSDK.MessageContent?
  public let eventTypeId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VisitorMessage : Swift.Codable {
  public let timestamp: Swift.String
  public let createdBy: Swift.String?
  public let message: ChatBotSDK.MessageContent?
  public let eventTypeId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MessageContent : Swift.Codable {
  public let text: Swift.String
  public let type: Swift.String?
  public let id: Swift.String?
  public let payload: ChatBotSDK.MessageContentPayload?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MessageContentPayload : Swift.Codable {
  public let script: Swift.String?
  public let executeAt: Swift.String?
  public let id: Swift.String?
  public let executeAsync: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ParsedMessage : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let text: Swift.String
  public let type: ChatBotSDK.ParsedMessageType
  public let sender: ChatBotSDK.ParsedMessageSender
  public let timestamp: Foundation.Date
  public let isFromBot: Swift.Bool
  public let payload: [Swift.String : ChatBotSDK.AnyCodable]?
  public let status: ChatBotSDK.ParsedMessageStatus
  public let originalData: Swift.String?
  public let userData: ChatBotSDK.MessageUser?
  public let attachments: [ChatBotSDK.Attachment]
  public let messageType: Swift.String?
  public let agentStatus: Swift.String?
  public init(id: Swift.String, text: Swift.String, type: ChatBotSDK.ParsedMessageType, sender: ChatBotSDK.ParsedMessageSender, timestamp: Foundation.Date, isFromBot: Swift.Bool, payload: [Swift.String : Any]? = nil, status: ChatBotSDK.ParsedMessageStatus = .sent, originalData: Swift.String? = nil, userData: ChatBotSDK.MessageUser? = nil, messageType: Swift.String? = nil, agentStatus: Swift.String? = nil, attachments: [ChatBotSDK.Attachment] = [])
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ParsedMessageType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case text
  case sendMessage
  case image
  case video
  case file
  case button
  case quickReply
  case carousel
  case list
  case assignment
  case system
  case assigneeBanner
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.ParsedMessageType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.ParsedMessageType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ParsedMessageSender : Swift.String, Swift.Codable, Swift.CaseIterable {
  case bot
  case agent
  case visitor
  case system
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.ParsedMessageSender]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.ParsedMessageSender] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ParsedMessageStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
  case sending
  case sent
  case delivered
  case seen
  case failed
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.ParsedMessageStatus]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.ParsedMessageStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct SendVisitorMessageRequest : Swift.Codable {
  public let visitorKey: Swift.String
  public let isLiveMode: Swift.Bool
  public let webUrl: Swift.String
  public let payload: ChatBotSDK.MessagePayload
  public let isTextMode: Swift.Bool
  public let system: ChatBotSDK.SystemInfo
  public let message: ChatBotSDK.SendMessageData
  public let conversationKey: Swift.String
  public let connectionKey: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MessagePayload : Swift.Codable {
  public let callFrom: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SendMessageData : Swift.Codable {
  public let type: Swift.String
  public let data: ChatBotSDK.SendMessageContent
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SendMessageContent : Swift.Codable {
  public let body: Swift.String
  public let callback: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SystemInfo : Swift.Codable {
  public let timezone: Swift.String
  public let os: Swift.String
  public let browser: Swift.String
  public let browserLanguage: Swift.String
  public let referrerUrl: Swift.String
  public init(timezone: Swift.String = TimeZone.current.identifier, os: Swift.String = "iOS \(UIDevice.current.systemVersion)", browser: Swift.String = "", browserLanguage: Swift.String = Locale.current.identifier, referrerUrl: Swift.String = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConversationSystemInfo : Swift.Codable {
  public let timezone: Swift.String
  public let os: Swift.String
  public let browser: Swift.String
  public let browserLanguage: Swift.String
  public let referrerUrl: Swift.String
  public init(timezone: Swift.String = TimeZone.current.identifier, os: Swift.String = "iOS \(UIDevice.current.systemVersion)", browser: Swift.String = "", browserLanguage: Swift.String = Locale.current.identifier, referrerUrl: Swift.String = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaqFeedbackData : Swift.Codable {
  public let isPositive: Swift.Bool
  public let faqIntentId: Swift.Int
  public let conversationId: Swift.Int
  public init(isPositive: Swift.Bool, faqIntentId: Swift.Int, conversationId: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaqFeedbackMessageData : Swift.Codable {
  public let type: Swift.String
  public let data: ChatBotSDK.FaqFeedbackData
  public init(type: Swift.String, data: ChatBotSDK.FaqFeedbackData)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaqFeedbackRequest : Swift.Codable {
  public let visitorKey: Swift.String
  public let isLiveMode: Swift.Bool
  public let webUrl: Swift.String
  public let payload: ChatBotSDK.MessagePayload
  public let isTextMode: Swift.Bool
  public let system: ChatBotSDK.SystemInfo
  public let message: ChatBotSDK.FaqFeedbackMessageData
  public let conversationKey: Swift.String
  public let connectionKey: Swift.String
  public init(visitorKey: Swift.String, isLiveMode: Swift.Bool, webUrl: Swift.String, payload: ChatBotSDK.MessagePayload, isTextMode: Swift.Bool, system: ChatBotSDK.SystemInfo, message: ChatBotSDK.FaqFeedbackMessageData, conversationKey: Swift.String, connectionKey: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JavaScriptResponseRequest : Swift.Codable {
  public let visitorKey: Swift.String
  public let isLiveMode: Swift.Bool
  public let webUrl: Swift.String
  public let payload: ChatBotSDK.MessagePayload
  public let isTextMode: Swift.Bool
  public let system: ChatBotSDK.SystemInfo
  public let message: ChatBotSDK.JavaScriptResponseMessageData
  public let conversationKey: Swift.String
  public let connectionKey: Swift.String
  public init(visitorKey: Swift.String, isLiveMode: Swift.Bool, webUrl: Swift.String, payload: ChatBotSDK.MessagePayload, isTextMode: Swift.Bool, system: ChatBotSDK.SystemInfo, message: ChatBotSDK.JavaScriptResponseMessageData, conversationKey: Swift.String, connectionKey: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JavaScriptResponseMessageData : Swift.Codable {
  public let type: Swift.String
  public let data: ChatBotSDK.JavaScriptResponseData
  public init(type: Swift.String, data: ChatBotSDK.JavaScriptResponseData)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JavaScriptResponseData : Swift.Codable {
  public let variables: ChatBotSDK.JavaScriptVariables
  public let id: Swift.String?
  public init(variables: ChatBotSDK.JavaScriptVariables, id: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JavaScriptVariables : Swift.Codable {
  public let contactVariables: [Swift.String]
  public let nonContactVariables: [Swift.String]
  public init(contactVariables: [Swift.String], nonContactVariables: [Swift.String])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SendVisitorMessageResponse : Swift.Codable {
  public let success: Swift.Bool
  public let message: Swift.String?
  public let messageId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateConversationWebhookRequest : Swift.Codable {
  public let visitorKey: Swift.String
  public let isLiveMode: Swift.Bool
  public let webUrl: Swift.String
  public let payload: ChatBotSDK.ConversationPayload
  public let isTextMode: Swift.Bool
  public let system: ChatBotSDK.ConversationSystemInfo
  public let message: ChatBotSDK.ConversationMessage
  public let conversationKey: Swift.String
  public let wtCorrelationId: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConversationPayload : Swift.Codable {
  public let callFrom: Swift.String
  public init(callFrom: Swift.String = "initialization")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConversationMessage : Swift.Codable {
  public let type: Swift.String
  public let data: ChatBotSDK.MessageData
  public init(type: Swift.String = "text", data: ChatBotSDK.MessageData = MessageData())
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MessageData : Swift.Codable {
  public let body: Swift.String
  public init(body: Swift.String = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateConversationResponse : Swift.Codable {
  public let success: Swift.Bool
  public let message: Swift.String?
  public let conversationKey: Swift.String?
  public init(success: Swift.Bool, message: Swift.String?, conversationKey: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConversationListResponse : Swift.Codable {
  public let searchAfter: Swift.String?
  public let conversations: [ChatBotSDK.ApiConversation]
  public let ok: Swift.Bool
  public let utcTimestamp: Swift.String
  public let totalConversations: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiConversation : Swift.Codable {
  public let message: Swift.String
  public let threadKey: Swift.String
  public let lastMessageTime: Swift.String?
  public let unreadCount: Swift.Int
  public let title: Swift.String
  public let visitorKey: Swift.String
  public let botId: Swift.Int
  public let createdAt: Swift.String
  public let lastActivityAt: Swift.String
  public let statusId: Swift.Int
  public let isAbandoned: Swift.Int
  public let visitorUnreadMessagesCount: Swift.Int
  public let assignee: ChatBotSDK.Assignee?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Assignee : Swift.Codable {
  public let name: Swift.String
  public let id: Swift.Int
  public let email: Swift.String
  public let typeId: Swift.Int
  public let imageUrl: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConversationListResult : Swift.Codable {
  public let conversations: [ChatBotSDK.Conversation]
  public let searchAfter: Swift.String?
  public let hasMore: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConversationListRequest : Swift.Codable {
  public let origin: Swift.String
  public let limit: Swift.Int
  public let isOrderByAsc: Swift.Bool
  public let visitorKey: Swift.String
  public let searchAfter: Swift.String?
  public init(origin: Swift.String = "chat_widget", limit: Swift.Int = 25, isOrderByAsc: Swift.Bool = false, visitorKey: Swift.String, searchAfter: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ParsedMessageData : Swift.Codable {
  public let text: Swift.String
  public let payload: [Swift.String : ChatBotSDK.AnyCodable]
  public let type: Swift.String
  public let version: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ParsedMessageTextContent : Swift.Codable {
  public let type: Swift.String
  public let text: Swift.String
  public let id: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MessageAssignee : Swift.Codable {
  public let type: Swift.String
  public let timestamp: Swift.String
  public let assignedTo: Swift.String?
  public let conversationKey: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FileUploadConfiguration : Swift.Codable {
  public let title: Swift.String
  public let allowExtensions: [Swift.String]
  public let maxFileSizeInKb: Swift.Int
  public let uploadFileLimit: Swift.Int
  public let errorMessage: ChatBotSDK.FileUploadErrorMessage
  public let linkTrackingEnabled: Swift.Bool
  public let location: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FileUploadErrorMessage : Swift.Codable {
  public let fileSize: Swift.String
  public let fileExtensions: Swift.String
  public let fileNotFound: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ConversationClosedChecker {
  public static func checkConversationClosed(from apiResponseData: Foundation.Data, searchAfter: Swift.String?) -> Swift.Bool
  @objc deinit
}
public class ChatNavigationCoordinator : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($navigationStack) public var navigationStack: [ChatBotSDK.ChatNavigationCoordinator.Destination] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $navigationStack: Combine.Published<[ChatBotSDK.ChatNavigationCoordinator.Destination]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isPresentingFullScreen) public var isPresentingFullScreen: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isPresentingFullScreen: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($currentDestination) public var currentDestination: ChatBotSDK.ChatNavigationCoordinator.Destination? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $currentDestination: Combine.Published<ChatBotSDK.ChatNavigationCoordinator.Destination?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public enum Destination : Swift.Hashable {
    case conversationList
    case conversationDetail(conversationId: Swift.String?, isNewConversation: Swift.Bool = false)
    case settings
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: ChatBotSDK.ChatNavigationCoordinator.Destination, rhs: ChatBotSDK.ChatNavigationCoordinator.Destination) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  public func navigateToConversationList()
  public func navigateToConversation(conversationId: Swift.String?, isNewConversation: Swift.Bool = false)
  public func navigateToSettings()
  public func navigateBack()
  public func navigateToRoot()
  public func presentFullScreenChat()
  public func dismissFullScreenChat()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct ChatNavigationView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK0A14NavigationViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct FullScreenChatView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK010FullScreenA4ViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct ChatHomeView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK0A8HomeViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct ChatSettingsView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK0A12SettingsViewV4bodyQrvp", 0) __
}

public class MessageSendService {
  public init()
  public func sendVisitorMessage(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String, messageBody: Swift.String) async throws -> ChatBotSDK.SendVisitorMessageResponse
  public func sendFileUploadMessage(files: [ChatBotSDK.UploadedFile], visitorKey: Swift.String, conversationKey: Swift.String, botPublishKey: Swift.String) async throws -> ChatBotSDK.SendVisitorMessageResponse
  public func sendFileMessage(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String, fileData: Foundation.Data, fileName: Swift.String, mimeType: Swift.String) async throws -> ChatBotSDK.SendVisitorMessageResponse
  public func sendImageMessage(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String, image: UIKit.UIImage, fileName: Swift.String? = nil) async throws -> ChatBotSDK.SendVisitorMessageResponse
  public func sendFileFromURL(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String, fileURL: Foundation.URL) async throws -> ChatBotSDK.SendVisitorMessageResponse
  @objc deinit
}
public struct UploadedFile : Swift.Codable {
  public let filename: Swift.String
  public let link: Swift.String
  public let mimeType: Swift.String
  public let fileExtension: Swift.String
  public let messageId: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FileUploadMessageRequest : Swift.Codable {
  public let visitorKey: Swift.String
  public let isLiveMode: Swift.Bool
  public let webUrl: Swift.String
  public let payload: ChatBotSDK.FileUploadPayload
  public let isTextMode: Swift.Bool
  public let system: ChatBotSDK.FileUploadSystemInfo
  public let message: ChatBotSDK.FileUploadMessage
  public let conversationKey: Swift.String
  public let connectionKey: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FileUploadPayload : Swift.Codable {
  public let callFrom: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FileUploadSystemInfo : Swift.Codable {
  public let timezone: Swift.String
  public let os: Swift.String
  public let browser: Swift.String
  public let browserLanguage: Swift.String
  public let referrerUrl: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FileUploadMessage : Swift.Codable {
  public let type: Swift.String
  public let data: ChatBotSDK.FileUploadData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FileUploadData : Swift.Codable {
  public let files: [ChatBotSDK.UploadedFile]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct SVGImageView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(url: Swift.String, @SwiftUICore.ViewBuilder placeholder: () -> SwiftUICore.AnyView? = { nil })
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK12SVGImageViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct SimpleSVGView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(svgContent: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK13SimpleSVGViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct AvatarImageView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(imageUrl: Swift.String?, fallbackText: Swift.String, backgroundColor: SwiftUICore.Color, size: CoreFoundation.CGFloat = 50)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK15AvatarImageViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct SVGDebugView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(url: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK12SVGDebugViewV4bodyQrvp", 0) __
}
public struct WotNotConfig {
  public let apiKey: Swift.String
  public let baseUrl: Swift.String
  public let botId: Swift.String
  public let visitorKey: Swift.String
  public let accountKey: Swift.String
  public let accountId: Swift.Int
  public let conversationKey: Swift.String?
  public let enableLogging: Swift.Bool
  public let enableAnalytics: Swift.Bool
  public let enablePushNotifications: Swift.Bool
  public let enableFileUpload: Swift.Bool
  public let isMessageAvatarVisible: Swift.Bool
  public let isHeaderVisible: Swift.Bool
  public let maxFileSize: Swift.Int64
  public let supportedFileTypes: [Swift.String]
  public let socketUrl: Swift.String
  public let aiChunkThrottleDelay: Foundation.TimeInterval
  public let enableAiChunkThrottling: Swift.Bool
  public let enableMessageOrdering: Swift.Bool
  public init(apiKey: Swift.String, baseUrl: Swift.String? = nil, botId: Swift.String, visitorKey: Swift.String, accountKey: Swift.String, accountId: Swift.Int, conversationKey: Swift.String? = nil, enableLogging: Swift.Bool = false, enableAnalytics: Swift.Bool = true, enablePushNotifications: Swift.Bool = true, enableFileUpload: Swift.Bool = true, isMessageAvatarVisible: Swift.Bool = true, isHeaderVisible: Swift.Bool = true, maxFileSize: Swift.Int64 = 10 * 1024 * 1024, supportedFileTypes: [Swift.String] = ["jpg", "jpeg", "png", "pdf", "doc", "docx", "txt"], socketUrl: Swift.String? = nil, aiChunkThrottleDelay: Foundation.TimeInterval = 0, enableAiChunkThrottling: Swift.Bool = true, enableMessageOrdering: Swift.Bool = true)
  public func validate() -> Swift.String?
}
@_hasMissingDesignatedInitializers public class FileUploadInfoStore : Foundation.ObservableObject {
  public static let shared: ChatBotSDK.FileUploadInfoStore
  @Combine.Published @_projectedValueProperty($fileLimit) public var fileLimit: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $fileLimit: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($fileSizeLimitMb) public var fileSizeLimitMb: [Swift.String : Swift.Int] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $fileSizeLimitMb: Combine.Published<[Swift.String : Swift.Int]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func updateFileLimits(fileLimit: Swift.Int, fileSizeLimitMb: [Swift.String : Swift.Int])
  public func getFileSizeLimit(for mimeType: Swift.String) -> Swift.Int?
  public func isFileSizeValid(fileSizeInMB: Swift.Int, mimeType: Swift.String) -> Swift.Bool
  public func resetToDefaults()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class ConversationCreationService {
  public init(apiService: any ChatBotSDK.ApiServiceProtocol)
  public func createConversation(config: ChatBotSDK.WotNotConfig, conversationKey: Swift.String, botPublishKey: Swift.String?) async throws -> ChatBotSDK.CreateConversationResponse
  @objc deinit
}

@_Concurrency.MainActor @preconcurrency public struct ConversationDetailHeaderView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(onBackPressed: @escaping () -> Swift.Void, onMoreOptionsPressed: @escaping () -> Swift.Void, isConversationClosed: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK28ConversationDetailHeaderViewV4bodyQrvp", 0) __
}

public struct Conversation : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let title: Swift.String
  public let conversationKey: Swift.String?
  public let lastMessage: Swift.String?
  public let lastMessageTime: Swift.Int64
  public let unreadCount: Swift.Int
  public let status: ChatBotSDK.ConversationStatus
  public let participants: [ChatBotSDK.Participant]
  public let createdAt: Swift.Int64
  public let updatedAt: Swift.Int64
  public init(id: Swift.String, title: Swift.String, conversationKey: Swift.String? = nil, lastMessage: Swift.String? = nil, lastMessageTime: Swift.Int64 = Int64(Date().timeIntervalSince1970 * 1000), unreadCount: Swift.Int = 0, status: ChatBotSDK.ConversationStatus = .active, participants: [ChatBotSDK.Participant] = [], createdAt: Swift.Int64 = Int64(Date().timeIntervalSince1970 * 1000), updatedAt: Swift.Int64 = Int64(Date().timeIntervalSince1970 * 1000))
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ConversationStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
  case active
  case closed
  case archived
  case pending
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.ConversationStatus]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.ConversationStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct Participant : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let name: Swift.String
  public let avatar: Swift.String?
  public let type: ChatBotSDK.ParticipantType
  public let isOnline: Swift.Bool
  public let lastSeenAt: Swift.Int64
  public init(id: Swift.String, name: Swift.String, avatar: Swift.String? = nil, type: ChatBotSDK.ParticipantType, isOnline: Swift.Bool = false, lastSeenAt: Swift.Int64 = Int64(Date().timeIntervalSince1970 * 1000))
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ParticipantType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case user
  case bot
  case agent
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.ParticipantType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.ParticipantType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct ConversationListView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK20ConversationListViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct FullScreenConversationListView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK30FullScreenConversationListViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct OptionsDrawer : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(onCloseChatPressed: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK13OptionsDrawerV4bodyQrvp", 0) __
}

public struct ApiConstants {
  public enum Environment : Swift.String, Swift.CaseIterable {
    case dev
    case test
    case prod
    public static let current: ChatBotSDK.ApiConstants.Environment
    public init?(rawValue: Swift.String)
    public typealias AllCases = [ChatBotSDK.ApiConstants.Environment]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [ChatBotSDK.ApiConstants.Environment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public struct BaseUrls {
    public static var appBaseUrl: Swift.String {
      get
    }
    public static var hooksBaseUrl: Swift.String {
      get
    }
    public static var apiBaseUrl: Swift.String {
      get
    }
  }
  public struct Endpoints {
    public static var botPreference: Swift.String {
      get
    }
    public static func getMessageHistory(botPublishKey: Swift.String, visitorKey: Swift.String) -> Swift.String
    public static func getCreateConversationWebhook(webhookId: Swift.String) -> Swift.String
    public static var getSendMessageWebhook: Swift.String {
      get
    }
    public static var fileUpload: Swift.String {
      get
    }
    public static var webSocketUrl: Swift.String {
      get
    }
  }
  public struct WebSocket {
    public static var socketUrl: Swift.String {
      get
    }
    public static var originHeader: Swift.String {
      get
    }
  }
  public struct Defaults {
    public static var defaultBaseUrl: Swift.String {
      get
    }
    public static let defaultEmail: Swift.String
  }
  public struct Utils {
    public static func getCurrentEnvironment() -> Swift.String
    public static func isDevelopment() -> Swift.Bool
    public static func isTest() -> Swift.Bool
    public static func isProduction() -> Swift.Bool
    public static func getAvailableEnvironments() -> [Swift.String]
    public static func logCurrentConfiguration()
  }
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class SocketManager : Foundation.ObservableObject {
  @_Concurrency.MainActor public static let shared: ChatBotSDK.SocketManager
  @Combine.Published @_projectedValueProperty($connectionStatus) @_Concurrency.MainActor public var connectionStatus: ChatBotSDK.SocketConnectionStatus {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $connectionStatus: Combine.Published<ChatBotSDK.SocketConnectionStatus>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isConnected) @_Concurrency.MainActor public var isConnected: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isConnected: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor final public let newMessageReceived: Combine.PassthroughSubject<ChatBotSDK.SocketMessage, Swift.Never>
  @_Concurrency.MainActor final public let typingIndicatorReceived: Combine.PassthroughSubject<ChatBotSDK.TypingIndicatorData, Swift.Never>
  @_Concurrency.MainActor final public let agentTypingReceived: Combine.PassthroughSubject<ChatBotSDK.AgentTypingData, Swift.Never>
  @_Concurrency.MainActor final public let connectionStatusChanged: Combine.PassthroughSubject<ChatBotSDK.SocketConnectionStatus, Swift.Never>
  @_Concurrency.MainActor final public let eventsReceived: Combine.PassthroughSubject<[ChatBotSDK.SocketEvent], Swift.Never>
  @_Concurrency.MainActor final public let aiChunksReceived: Combine.PassthroughSubject<ChatBotSDK.AiChunkData, Swift.Never>
  @_Concurrency.MainActor final public let fileUploadRequestReceived: Combine.PassthroughSubject<ChatBotSDK.FileUploadRequestData, Swift.Never>
  @_Concurrency.MainActor public func setMessageOrderingEnabled(_ enabled: Swift.Bool)
  @_Concurrency.MainActor public func isMessageOrderingEnabled() -> Swift.Bool
  @_Concurrency.MainActor public func connect(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String?)
  @_Concurrency.MainActor public func disconnect()
  @_Concurrency.MainActor public func sendMessage(_ message: ChatBotSDK.SocketMessage)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct SocketMessage {
  public let id: Swift.String
  public let conversationKey: Swift.String?
  public let content: Swift.String
  public let messageType: Swift.String
  public let sender: ChatBotSDK.SocketMessageSender
  public let timestamp: Swift.String
  public init(id: Swift.String, conversationKey: Swift.String?, content: Swift.String, messageType: Swift.String, sender: ChatBotSDK.SocketMessageSender, timestamp: Swift.String)
}
public struct SocketMessageSender {
  public let id: Swift.String
  public let name: Swift.String
  public let type: Swift.String
  public init(id: Swift.String, name: Swift.String, type: Swift.String)
}
public struct TypingIndicatorData {
  public let isTyping: Swift.Bool
  public let senderId: Swift.String
  public let senderName: Swift.String
  public init(isTyping: Swift.Bool, senderId: Swift.String, senderName: Swift.String)
}
public struct AgentTypingData {
  public let typing: Swift.String
  public let sender: ChatBotSDK.AgentTypingSender
  public let conversationKey: Swift.String
  public init(typing: Swift.String, sender: ChatBotSDK.AgentTypingSender, conversationKey: Swift.String)
}
public struct AgentTypingSender {
  public let imageUrl: Swift.String?
  public let name: Swift.String
  public let type: Swift.String
  public init(imageUrl: Swift.String?, name: Swift.String, type: Swift.String)
}
public struct SocketEvent {
  public let conversationKey: Swift.String
  public let sender: ChatBotSDK.SocketEventSender
  public let timestamp: Swift.Int64
  public let assignee: ChatBotSDK.SocketEventSender?
  public let publishKey: Swift.String?
  public let messageId: Swift.String?
  public let type: Swift.String
  public let payload: ChatBotSDK.SocketEventPayload?
  public let rawData: [Swift.String : Any]?
  public init(conversationKey: Swift.String, sender: ChatBotSDK.SocketEventSender, timestamp: Swift.Int64, assignee: ChatBotSDK.SocketEventSender?, publishKey: Swift.String?, messageId: Swift.String?, type: Swift.String, payload: ChatBotSDK.SocketEventPayload?, rawData: [Swift.String : Any]? = nil)
  public static func fromDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.SocketEvent?
  public static func fromAssigneeDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.SocketEvent?
}
public struct SocketEventSender {
  public let email: Swift.String?
  public let id: Swift.Int?
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let type: Swift.String
  public let imageUrl: Swift.String?
  public init(email: Swift.String?, id: Swift.Int?, firstName: Swift.String?, lastName: Swift.String?, type: Swift.String, imageUrl: Swift.String?)
  public static func fromDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.SocketEventSender?
}
public struct SocketEventPayload {
  public let payload: ChatBotSDK.SocketEventMessagePayload?
  public let type: Swift.String
  public let version: Swift.Int?
  public let isClosed: Swift.Bool?
  public let buttons: [ChatBotSDK.SocketEventButton]?
  public init(payload: ChatBotSDK.SocketEventMessagePayload?, type: Swift.String, version: Swift.Int? = nil, isClosed: Swift.Bool? = nil, buttons: [ChatBotSDK.SocketEventButton]? = nil)
  public static func fromDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.SocketEventPayload?
}
public struct SocketEventMessagePayload {
  public let type: Swift.String
  public let text: Swift.String?
  public let version: Swift.String?
  public let waitTimeout: Swift.Int?
  public let id: Swift.String?
  public let linkTrackingEnabled: Swift.Bool?
  public let subType: Swift.String?
  public let isCollectFeedback: Swift.Bool?
  public let isIgnore: Swift.Bool?
  public let fileLimit: ChatBotSDK.FileLimitInfo?
  public let isMultipleMessageAllowed: Swift.Bool?
  public let image: ChatBotSDK.ImageAttachment?
  public let video: ChatBotSDK.VideoAttachment?
  public let document: ChatBotSDK.DocumentAttachment?
  public let visitorFileUpload: ChatBotSDK.VisitorFileUploadMessage?
  public init(type: Swift.String, text: Swift.String? = nil, version: Swift.String? = nil, waitTimeout: Swift.Int? = nil, id: Swift.String? = nil, linkTrackingEnabled: Swift.Bool? = nil, subType: Swift.String? = nil, isCollectFeedback: Swift.Bool? = nil, isIgnore: Swift.Bool? = nil, fileLimit: ChatBotSDK.FileLimitInfo? = nil, isMultipleMessageAllowed: Swift.Bool? = nil, image: ChatBotSDK.ImageAttachment? = nil, video: ChatBotSDK.VideoAttachment? = nil, document: ChatBotSDK.DocumentAttachment? = nil, visitorFileUpload: ChatBotSDK.VisitorFileUploadMessage? = nil)
  public static func fromDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.SocketEventMessagePayload?
}
public struct FileLimitInfo {
  public let fileLimit: Swift.Int
  public let fileSizeLimitMb: [Swift.String : Swift.Int]
  public init(fileLimit: Swift.Int, fileSizeLimitMb: [Swift.String : Swift.Int])
  public static func fromDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.FileLimitInfo?
}
public struct ImageAttachment {
  public let caption: Swift.String
  public let link: Swift.String
  public let mimeType: Swift.String
  public let fileName: Swift.String
  public init(caption: Swift.String, link: Swift.String, mimeType: Swift.String, fileName: Swift.String)
  public static func fromDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.ImageAttachment?
}
public struct VideoAttachment {
  public let caption: Swift.String
  public let link: Swift.String
  public let mimeType: Swift.String
  public let fileName: Swift.String
  public init(caption: Swift.String, link: Swift.String, mimeType: Swift.String, fileName: Swift.String)
  public static func fromDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.VideoAttachment?
}
public struct DocumentAttachment {
  public let caption: Swift.String
  public let link: Swift.String
  public let mimeType: Swift.String
  public let fileName: Swift.String
  public init(caption: Swift.String, link: Swift.String, mimeType: Swift.String, fileName: Swift.String)
  public static func fromDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.DocumentAttachment?
}
public struct VisitorFileUpload {
  public let filename: Swift.String
  public let link: Swift.String
  public let mimeType: Swift.String
  public let fileExtension: Swift.String
  public let messageId: Swift.String
  public init(filename: Swift.String, link: Swift.String, mimeType: Swift.String, fileExtension: Swift.String, messageId: Swift.String)
  public static func fromDictionary(_ data: [Swift.String : Any]) -> ChatBotSDK.VisitorFileUpload?
}
public struct VisitorFileUploadData {
  public let files: [ChatBotSDK.VisitorFileUpload]
  public init(files: [ChatBotSDK.VisitorFileUpload])
  public static func fromDictionary(_ data: [Swift.String : Any]) -> ChatBotSDK.VisitorFileUploadData?
}
public struct VisitorFileUploadMessage {
  public let conversationExternalKey: Swift.String
  public let type: Swift.String
  public let data: ChatBotSDK.VisitorFileUploadData
  public let timestamp: Swift.Int64
  public let sendBy: Swift.String?
  public let messageId: Swift.String
  public init(conversationExternalKey: Swift.String, type: Swift.String, data: ChatBotSDK.VisitorFileUploadData, timestamp: Swift.Int64, sendBy: Swift.String?, messageId: Swift.String)
  public static func fromDictionary(_ data: [Swift.String : Any]) -> ChatBotSDK.VisitorFileUploadMessage?
}
public enum SocketConnectionStatus : Swift.String, Swift.CaseIterable {
  case disconnected
  case connecting
  case connected
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.SocketConnectionStatus]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.SocketConnectionStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct SocketEventButton {
  public let callback: Swift.String
  public let type: Swift.String
  public let title: Swift.String
  public init(callback: Swift.String, type: Swift.String, title: Swift.String)
  public static func fromDictionary(_ dict: [Swift.String : Any]) -> ChatBotSDK.SocketEventButton?
}
public struct AiChunkData {
  public let conversationKey: Swift.String
  public let messageId: Swift.String
  public let text: Swift.String
  public let timestamp: Swift.Int64
  public let isLastChunk: Swift.Bool
  public let fullMessage: Swift.String?
  public init(conversationKey: Swift.String, messageId: Swift.String, text: Swift.String, timestamp: Swift.Int64, isLastChunk: Swift.Bool = false, fullMessage: Swift.String? = nil)
}
public enum QueuedMessageType {
  case aiChunk
  case socketEvent
  case socketMessage
  public static func == (a: ChatBotSDK.QueuedMessageType, b: ChatBotSDK.QueuedMessageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct QueuedMessage {
  public let type: ChatBotSDK.QueuedMessageType
  public let timestamp: Foundation.TimeInterval
  public let aiChunk: ChatBotSDK.AiChunkData?
  public let socketEvent: ChatBotSDK.SocketEvent?
  public let socketMessage: ChatBotSDK.SocketMessage?
  public init(type: ChatBotSDK.QueuedMessageType, timestamp: Foundation.TimeInterval, aiChunk: ChatBotSDK.AiChunkData?, socketEvent: ChatBotSDK.SocketEvent?, socketMessage: ChatBotSDK.SocketMessage?)
}
public struct FileUploadRequestData {
  public let conversationKey: Swift.String
  public let sender: ChatBotSDK.SocketEventSender
  public let timestamp: Swift.Int64
  public let assignee: ChatBotSDK.SocketEventSender?
  public let publishKey: Swift.String?
  public let messageId: Swift.String?
  public let fileUploadData: ChatBotSDK.FileUploadConfiguration
  public init(conversationKey: Swift.String, sender: ChatBotSDK.SocketEventSender, timestamp: Swift.Int64, assignee: ChatBotSDK.SocketEventSender?, publishKey: Swift.String?, messageId: Swift.String?, fileUploadData: ChatBotSDK.FileUploadConfiguration)
}
@_hasMissingDesignatedInitializers public class AgentInfoStore : Foundation.ObservableObject {
  public static let shared: ChatBotSDK.AgentInfoStore
  @Combine.Published @_projectedValueProperty($agentTitle) public var agentTitle: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $agentTitle: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($agentAvatarUrl) public var agentAvatarUrl: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $agentAvatarUrl: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isAgentBot) public var isAgentBot: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isAgentBot: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public func updateFromBotPreferences()
  public func updateAgentTitle(_ title: Swift.String)
  public func updateAgentAvatar(_ avatarUrl: Swift.String?)
  @_Concurrency.MainActor public func resetToDefaults()
  public func getCurrentTitle() -> Swift.String
  public func getCurrentAvatarUrl() -> Swift.String?
  @_Concurrency.MainActor public func updateFromAssignee(_ assignee: ChatBotSDK.SocketEventSender)
  @_Concurrency.MainActor public func updateFromAssignee(type: Swift.String, name: Swift.String?, imageUrl: Swift.String?)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct ChatEndedView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(onStartNewChat: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK0A9EndedViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class RealtimeMessageService : Foundation.ObservableObject {
  @_Concurrency.MainActor public static let shared: ChatBotSDK.RealtimeMessageService
  @_Concurrency.MainActor final public let newMessageReceived: Combine.PassthroughSubject<ChatBotSDK.Message, Swift.Never>
  @_Concurrency.MainActor final public let typingIndicatorReceived: Combine.PassthroughSubject<ChatBotSDK.TypingIndicatorData, Swift.Never>
  @_Concurrency.MainActor final public let connectionStatusChanged: Combine.PassthroughSubject<ChatBotSDK.SocketConnectionStatus, Swift.Never>
  @_Concurrency.MainActor public func connect(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String?)
  @_Concurrency.MainActor public func disconnect()
  @_Concurrency.MainActor public func sendMessage(_ message: ChatBotSDK.Message)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct MarkdownTestView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK16MarkdownTestViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct ConversationHeaderView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(conversationKey: Swift.String?, onBackPressed: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK22ConversationHeaderViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class WotNotSDK : Foundation.ObservableObject {
  @_Concurrency.MainActor public static let shared: ChatBotSDK.WotNotSDK
  @_Concurrency.MainActor public var config: ChatBotSDK.WotNotConfig?
  @Combine.Published @_projectedValueProperty($initializationStatus) @_Concurrency.MainActor public var initializationStatus: ChatBotSDK.InitializationStatus {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $initializationStatus: Combine.Published<ChatBotSDK.InitializationStatus>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($validationStatus) @_Concurrency.MainActor public var validationStatus: ChatBotSDK.ValidationStatus {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $validationStatus: Combine.Published<ChatBotSDK.ValidationStatus>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public func initialize(config: ChatBotSDK.WotNotConfig) async throws
  @_Concurrency.MainActor public func setUser(_ user: ChatBotSDK.User) throws
  @_Concurrency.MainActor public func setBot(_ bot: ChatBotSDK.Bot) throws
  @_Concurrency.MainActor public func setTheme(_ theme: ChatBotSDK.WotNotTheme) throws
  @_Concurrency.MainActor public func launchConversationList() throws -> some SwiftUICore.View
  
  @_Concurrency.MainActor public func launchConversationListFullScreen() throws -> some SwiftUICore.View
  
  @_Concurrency.MainActor public func launchNewConversation() throws -> some SwiftUICore.View
  
  @_Concurrency.MainActor public func launchConversation(conversationId: Swift.String) throws -> some SwiftUICore.View
  
  @_Concurrency.MainActor public func openDetailScreen(conversationKey: Swift.String) throws -> some SwiftUICore.View
  
  @_Concurrency.MainActor public func openConversationDetailScreenWithoutKey() async throws -> Swift.String
  @_Concurrency.MainActor public func sendMessage(_ content: Swift.String, conversationKey: Swift.String? = nil) async throws -> ChatBotSDK.SendVisitorMessageResponse
  @_Concurrency.MainActor public func sendImageMessage(_ image: UIKit.UIImage, conversationKey: Swift.String? = nil) async throws -> ChatBotSDK.SendVisitorMessageResponse
  @_Concurrency.MainActor public func sendFileMessage(_ fileURL: Foundation.URL, conversationKey: Swift.String? = nil) async throws -> ChatBotSDK.SendVisitorMessageResponse
  @_Concurrency.MainActor public func getConversations(limit: Swift.Int = 25, searchAfter: Swift.String? = nil) async throws -> ChatBotSDK.ConversationListResult
  @_Concurrency.MainActor public func getMessages(conversationId: Swift.String, limit: Swift.Int = 50, offset: Swift.Int = 0) async throws -> [ChatBotSDK.Message]
  @_Concurrency.MainActor public func getMessageHistory(conversationKey: Swift.String? = nil, searchAfter: Swift.String? = nil, limit: Swift.Int = 50, onConversationClosed: ((Swift.Bool) -> Swift.Void)? = nil, forceNoConversationKey: Swift.Bool = false) async throws -> ChatBotSDK.MessageHistoryData
  @_Concurrency.MainActor public func sendTypingIndicator(isTyping: Swift.Bool, conversationKey: Swift.String? = nil)
  @_Concurrency.MainActor public func getWebSocketManager() -> ChatBotSDK.WebSocketManager?
  @_Concurrency.MainActor public func getRealtimeMessageService() -> ChatBotSDK.RealtimeMessageService?
  @_Concurrency.MainActor public func sendRealtimeMessage(_ content: Swift.String, conversationKey: Swift.String? = nil)
  @_Concurrency.MainActor public func getConfig() -> ChatBotSDK.WotNotConfig?
  @_Concurrency.MainActor public func getVisitorKey() -> Swift.String?
  @_Concurrency.MainActor public func getUser() -> ChatBotSDK.User?
  @_Concurrency.MainActor public func getBot() -> ChatBotSDK.Bot?
  @_Concurrency.MainActor public func getTheme() -> ChatBotSDK.WotNotTheme?
  @_Concurrency.MainActor public func getBotPreferences() -> ChatBotSDK.BotPreferenceResponse?
  @_Concurrency.MainActor public func isSDKInitialized() -> Swift.Bool
  @_Concurrency.MainActor public func isBotValidated() -> Swift.Bool
  @_Concurrency.MainActor public func isMessageAvatarVisible() -> Swift.Bool
  @_Concurrency.MainActor public func isHeaderVisible() -> Swift.Bool
  @_Concurrency.MainActor public func reset()
  @_Concurrency.MainActor public func updateAgentTitle(_ title: Swift.String)
  @_Concurrency.MainActor public func updateAgentAvatar(_ avatarUrl: Swift.String?)
  @_Concurrency.MainActor public func resetAgentInfoToDefaults()
  @_Concurrency.MainActor public func getCurrentAgentTitle() -> Swift.String
  @_Concurrency.MainActor public func getCurrentAgentAvatarUrl() -> Swift.String?
  @_Concurrency.MainActor public func updateAgentInfoFromAssignee(_ assignee: ChatBotSDK.SocketEventSender)
  @_Concurrency.MainActor public func updateAgentInfoFromAssignee(type: Swift.String, name: Swift.String?, imageUrl: Swift.String?)
  @_Concurrency.MainActor public func updateAgentInfoFromApiAssignee(assignee: ChatBotSDK.MessageAssignee?, users: [Swift.String : ChatBotSDK.MessageUser]?)
  @_Concurrency.MainActor public func sendJavaScriptResponse(botPublishKey: Swift.String, request: ChatBotSDK.JavaScriptResponseRequest) async throws
  @_Concurrency.MainActor public func startNewConversation() async throws -> Swift.String
  @_Concurrency.MainActor public func startNewConversationAndLaunch() async throws -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum InitializationStatus : Swift.Equatable {
  case notInitialized
  case initialized
  case initializationFailed(Swift.String)
  public static func == (a: ChatBotSDK.InitializationStatus, b: ChatBotSDK.InitializationStatus) -> Swift.Bool
}
public enum ValidationStatus : Swift.Equatable {
  case notValidated
  case validating
  case validated
  case validationFailed(Swift.String)
  public static func == (a: ChatBotSDK.ValidationStatus, b: ChatBotSDK.ValidationStatus) -> Swift.Bool
}
public struct User : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let email: Swift.String?
  public let name: Swift.String?
  public let phone: Swift.String?
  public let avatar: Swift.String?
  public let customAttributes: [Swift.String : ChatBotSDK.AnyCodable]?
  public let createdAt: Swift.Int64
  public let lastSeenAt: Swift.Int64
  public init(id: Swift.String, email: Swift.String? = nil, name: Swift.String? = nil, phone: Swift.String? = nil, avatar: Swift.String? = nil, customAttributes: [Swift.String : Any]? = nil, createdAt: Swift.Int64 = Int64(Date().timeIntervalSince1970 * 1000), lastSeenAt: Swift.Int64 = Int64(Date().timeIntervalSince1970 * 1000))
  @_hasMissingDesignatedInitializers public class Builder {
    public func setId(_ id: Swift.String) -> ChatBotSDK.User.Builder
    public func setEmail(_ email: Swift.String?) -> ChatBotSDK.User.Builder
    public func setName(_ name: Swift.String?) -> ChatBotSDK.User.Builder
    public func setPhone(_ phone: Swift.String?) -> ChatBotSDK.User.Builder
    public func setAvatar(_ avatar: Swift.String?) -> ChatBotSDK.User.Builder
    public func setCustomAttributes(_ attributes: [Swift.String : Any]?) -> ChatBotSDK.User.Builder
    public func setCreatedAt(_ createdAt: Swift.Int64) -> ChatBotSDK.User.Builder
    public func setLastSeenAt(_ lastSeenAt: Swift.Int64) -> ChatBotSDK.User.Builder
    public func build() -> ChatBotSDK.User
    @objc deinit
  }
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init(_ value: Any)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol ApiServiceProtocol {
  func createUser(_ user: ChatBotSDK.User) async throws -> ChatBotSDK.User
  func getUser(userId: Swift.String) async throws -> ChatBotSDK.User
  func updateUser(userId: Swift.String, user: ChatBotSDK.User) async throws -> ChatBotSDK.User
  func getBot(botId: Swift.String) async throws -> ChatBotSDK.Bot
  func getConversations(accountId: Swift.Int, visitorKey: Swift.String, limit: Swift.Int, searchAfter: Swift.String?) async throws -> ChatBotSDK.ConversationListResult
  func getConversation(conversationId: Swift.String) async throws -> ChatBotSDK.Conversation
  func createConversation(_ request: ChatBotSDK.CreateConversationRequest) async throws -> ChatBotSDK.Conversation
  func updateConversation(conversationId: Swift.String, conversation: ChatBotSDK.Conversation) async throws -> ChatBotSDK.Conversation
  func getMessages(conversationId: Swift.String, limit: Swift.Int, offset: Swift.Int) async throws -> [ChatBotSDK.Message]
  func sendMessage(conversationId: Swift.String, message: ChatBotSDK.SendMessageRequest) async throws -> ChatBotSDK.Message
  func updateMessageStatus(messageId: Swift.String, status: ChatBotSDK.MessageStatus) async throws -> ChatBotSDK.Message
  func getMessageHistory(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String?, searchAfter: Swift.String?, limit: Swift.Int, onConversationClosed: ((Swift.Bool) -> Swift.Void)?) async throws -> ChatBotSDK.MessageHistoryData
  func createConversationViaWebhook(webhookId: Swift.String, request: ChatBotSDK.CreateConversationWebhookRequest) async throws -> ChatBotSDK.CreateConversationResponse
  func endConversation(conversationKey: Swift.String, visitorKey: Swift.String) async throws
  func submitFaqFeedback(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String, isPositive: Swift.Bool, faqIntentId: Swift.Int, conversationId: Swift.Int) async throws
  func sendJavaScriptResponse(botPublishKey: Swift.String, request: ChatBotSDK.JavaScriptResponseRequest) async throws
}
public class ApiService : ChatBotSDK.ApiServiceProtocol {
  public init(baseURL: Swift.String, apiKey: Swift.String)
  public func createUser(_ user: ChatBotSDK.User) async throws -> ChatBotSDK.User
  public func getUser(userId: Swift.String) async throws -> ChatBotSDK.User
  public func updateUser(userId: Swift.String, user: ChatBotSDK.User) async throws -> ChatBotSDK.User
  public func getBot(botId: Swift.String) async throws -> ChatBotSDK.Bot
  public func getConversations(accountId: Swift.Int, visitorKey: Swift.String, limit: Swift.Int = 10, searchAfter: Swift.String? = nil) async throws -> ChatBotSDK.ConversationListResult
  public func getConversation(conversationId: Swift.String) async throws -> ChatBotSDK.Conversation
  public func createConversation(_ request: ChatBotSDK.CreateConversationRequest) async throws -> ChatBotSDK.Conversation
  public func updateConversation(conversationId: Swift.String, conversation: ChatBotSDK.Conversation) async throws -> ChatBotSDK.Conversation
  public func getMessages(conversationId: Swift.String, limit: Swift.Int = 50, offset: Swift.Int = 0) async throws -> [ChatBotSDK.Message]
  public func sendMessage(conversationId: Swift.String, message: ChatBotSDK.SendMessageRequest) async throws -> ChatBotSDK.Message
  public func updateMessageStatus(messageId: Swift.String, status: ChatBotSDK.MessageStatus) async throws -> ChatBotSDK.Message
  public func getMessageHistory(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String?, searchAfter: Swift.String?, limit: Swift.Int = 50, onConversationClosed: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> ChatBotSDK.MessageHistoryData
  public func createConversationViaWebhook(webhookId: Swift.String, request: ChatBotSDK.CreateConversationWebhookRequest) async throws -> ChatBotSDK.CreateConversationResponse
  public func endConversation(conversationKey: Swift.String, visitorKey: Swift.String) async throws
  public func submitFaqFeedback(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String, isPositive: Swift.Bool, faqIntentId: Swift.Int, conversationId: Swift.Int) async throws
  public func sendJavaScriptResponse(botPublishKey: Swift.String, request: ChatBotSDK.JavaScriptResponseRequest) async throws
  @objc deinit
}
public class BotPreferenceRepository {
  public init()
  public func fetchBotPreferences(config: ChatBotSDK.WotNotConfig, correlationId: Swift.String? = nil) async throws -> ChatBotSDK.BotPreferenceResponse
  public func validateBotPreferences(_ response: ChatBotSDK.BotPreferenceResponse) -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BotPreferenceCache {
  public static let shared: ChatBotSDK.BotPreferenceCache
  public func getCachedPreferences() -> ChatBotSDK.BotPreferenceResponse?
  public func cachePreferences(_ preferences: ChatBotSDK.BotPreferenceResponse)
  public func clearCache()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct MessageInputView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(messageText: SwiftUICore.Binding<Swift.String>, onSendMessage: @escaping () -> Swift.Void, onTypingChanged: @escaping (Swift.Bool) -> Swift.Void, conversationKey: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK16MessageInputViewV4bodyQrvp", 0) __
}
public struct Appearance : Swift.Codable {
  public let messengerPrompt: Swift.String?
  public let botImage: Swift.String?
  public let iconUrl: Swift.String?
  public let isHistoryRetentionEnabled: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BotPreferenceResponse : Swift.Codable {
  public let ok: Swift.Bool
  public let isActive: Swift.Bool
  public let botPublishKey: Swift.String
  public let conversationKey: Swift.String?
  public let botId: Swift.String?
  public let visitorKey: Swift.String?
  public let accountKey: Swift.String?
  public let appearance: ChatBotSDK.Appearance?
  public init(ok: Swift.Bool, isActive: Swift.Bool, botPublishKey: Swift.String, conversationKey: Swift.String? = nil, botId: Swift.String? = nil, visitorKey: Swift.String? = nil, accountKey: Swift.String? = nil, appearance: ChatBotSDK.Appearance? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}


@_hasMissingDesignatedInitializers public class SVGImageViewTests {
  public static func testSVGDetection()
  public static func testSVGFallbackScenarios()
  public static func testSVGTimeoutBehavior()
  @objc deinit
}
public enum WotNotError : Swift.Error, Foundation.LocalizedError {
  case sdkNotInitialized
  case validationInProgress
  case validationFailed(Swift.String)
  case configurationError(Swift.String)
  case missingParameter(Swift.String)
  case apiError(Swift.String, Swift.Int?)
  case networkError(Swift.String)
  case authenticationError(Swift.String)
  case fileError(Swift.String)
  case themeError(Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class MarkdownHTMLRenderer {
  public static func renderMarkdownHTML(_ content: Swift.String, fontSize: CoreFoundation.CGFloat = 14, linkColor: SwiftUICore.Color? = nil) -> Foundation.AttributedString
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct MarkdownHTMLText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ content: Swift.String, font: SwiftUICore.Font = .system(size: 14), color: SwiftUICore.Color = .primary, linkColor: SwiftUICore.Color? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK16MarkdownHTMLTextV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct MarkdownHTMLTextWithFallback : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ content: Swift.String, font: SwiftUICore.Font = .system(size: 14), color: SwiftUICore.Color = .primary, fontSize: CoreFoundation.CGFloat? = nil, linkColor: SwiftUICore.Color? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK28MarkdownHTMLTextWithFallbackV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class FileUploadService {
  public static let shared: ChatBotSDK.FileUploadService
  public func uploadFile(fileData: Foundation.Data, fileName: Swift.String, mimeType: Swift.String, accountId: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String, customLocation: Swift.String? = nil) async throws -> ChatBotSDK.FileUploadResponse
  @objc deinit
}
public struct FileUploadResponse : Swift.Codable {
  public let attachmentLink: Swift.String
  public let ok: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum FileUploadError : Swift.Error, Foundation.LocalizedError {
  case invalidURL
  case invalidResponse
  case uploadFailed(Swift.Int)
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class ConversationKeyGenerator {
  public static func generateConversationKey() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MarkdownRenderer {
  public static func renderMarkdown(_ content: Swift.String, fontSize: CoreFoundation.CGFloat = 14) -> Foundation.AttributedString
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct MarkdownText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ content: Swift.String, font: SwiftUICore.Font = .system(size: 14), color: SwiftUICore.Color = .primary)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK12MarkdownTextV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct MarkdownTextWithFallback : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ content: Swift.String, font: SwiftUICore.Font = .system(size: 14), color: SwiftUICore.Color = .primary, fontSize: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK24MarkdownTextWithFallbackV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct ConversationDetailView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(conversationId: Swift.String?, conversationKey: Swift.String? = nil, isNewConversation: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK22ConversationDetailViewV4bodyQrvp", 0) __
}


public struct Message : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let conversationId: Swift.String
  public let content: Swift.String
  public let type: ChatBotSDK.MessageType
  public let sender: ChatBotSDK.MessageSender
  public let timestamp: Swift.Int64
  public let status: ChatBotSDK.MessageStatus
  public let attachments: [ChatBotSDK.Attachment]
  public let metadata: [Swift.String : ChatBotSDK.AnyCodable]?
  public let faqFeedbackButtons: [ChatBotSDK.FaqFeedbackButton]?
  public init(id: Swift.String, conversationId: Swift.String, content: Swift.String, type: ChatBotSDK.MessageType = .text, sender: ChatBotSDK.MessageSender, timestamp: Swift.Int64 = Int64(Date().timeIntervalSince1970 * 1000), status: ChatBotSDK.MessageStatus = .sent, attachments: [ChatBotSDK.Attachment] = [], metadata: [Swift.String : Any]? = nil, faqFeedbackButtons: [ChatBotSDK.FaqFeedbackButton]? = nil)
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MessageType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case text
  case image
  case file
  case audio
  case video
  case location
  case quickReply
  case system
  case typingIndicator
  case assigneeBanner
  case faqFeedback
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.MessageType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.MessageType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct MessageSender : Swift.Codable {
  public let id: Swift.String
  public let name: Swift.String
  public let avatar: Swift.String?
  public let type: ChatBotSDK.SenderType
  public init(id: Swift.String, name: Swift.String, avatar: Swift.String? = nil, type: ChatBotSDK.SenderType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SenderType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case user
  case bot
  case agent
  case system
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.SenderType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.SenderType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum MessageStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
  case sending
  case sent
  case delivered
  case read
  case failed
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.MessageStatus]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.MessageStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct Attachment : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let name: Swift.String
  public let url: Swift.String
  public let type: ChatBotSDK.AttachmentType
  public let size: Swift.Int64
  public let mimeType: Swift.String?
  public init(id: Swift.String, name: Swift.String, url: Swift.String, type: ChatBotSDK.AttachmentType, size: Swift.Int64 = 0, mimeType: Swift.String? = nil)
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AttachmentType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case image
  case file
  case audio
  case video
  case document
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ChatBotSDK.AttachmentType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatBotSDK.AttachmentType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct QuickReply : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let title: Swift.String
  public let payload: Swift.String?
  public init(id: Swift.String, title: Swift.String, payload: Swift.String? = nil)
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaqFeedbackButton : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let title: Swift.String
  public let type: Swift.String
  public let callback: Swift.String
  public init(id: Swift.String, title: Swift.String, type: Swift.String, callback: Swift.String)
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct EndConversationDrawer : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(onEndChatPressed: @escaping () -> Swift.Void, onCancelPressed: @escaping () -> Swift.Void, isLoading: SwiftUICore.Binding<Swift.Bool>)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK21EndConversationDrawerV4bodyQrvp", 0) __
}

@_hasMissingDesignatedInitializers public class CorrelationIdManager {
  public static let shared: ChatBotSDK.CorrelationIdManager
  public func generateCorrelationId(addTimestamp: Swift.Bool = false) -> Swift.String
  public func generateAndStoreCorrelationId(addTimestamp: Swift.Bool = false) -> Swift.String
  public func getCurrentCorrelationId() -> Swift.String?
  public func clearCorrelationId()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct SDKInitializationView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(onInitialized: @escaping () -> Swift.Void, onError: @escaping (Swift.String) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10ChatBotSDK21SDKInitializationViewV4bodyQrvp", 0) __
}

public struct Bot : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let name: Swift.String
  public let description: Swift.String?
  public let avatar: Swift.String?
  public let isActive: Swift.Bool
  public let createdAt: Swift.Int64
  public let updatedAt: Swift.Int64
  public init(id: Swift.String, name: Swift.String, description: Swift.String? = nil, avatar: Swift.String? = nil, isActive: Swift.Bool = true, createdAt: Swift.Int64 = Int64(Date().timeIntervalSince1970 * 1000), updatedAt: Swift.Int64 = Int64(Date().timeIntervalSince1970 * 1000))
  @_hasMissingDesignatedInitializers public class Builder {
    public func setId(_ id: Swift.String) -> ChatBotSDK.Bot.Builder
    public func setName(_ name: Swift.String) -> ChatBotSDK.Bot.Builder
    public func setDescription(_ description: Swift.String?) -> ChatBotSDK.Bot.Builder
    public func setAvatar(_ avatar: Swift.String?) -> ChatBotSDK.Bot.Builder
    public func setIsActive(_ isActive: Swift.Bool) -> ChatBotSDK.Bot.Builder
    public func setCreatedAt(_ createdAt: Swift.Int64) -> ChatBotSDK.Bot.Builder
    public func setUpdatedAt(_ updatedAt: Swift.Int64) -> ChatBotSDK.Bot.Builder
    public func build() -> ChatBotSDK.Bot
    @objc deinit
  }
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WebSocketManager : ObjectiveC.NSObject, Foundation.ObservableObject {
  public static let shared: ChatBotSDK.WebSocketManager
  @Combine.Published @_projectedValueProperty($connectionStatus) public var connectionStatus: ChatBotSDK.WebSocketConnectionStatus {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $connectionStatus: Combine.Published<ChatBotSDK.WebSocketConnectionStatus>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($lastError) public var lastError: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $lastError: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let messageReceived: Combine.PassthroughSubject<ChatBotSDK.WebSocketMessage, Swift.Never>
  final public let typingIndicator: Combine.PassthroughSubject<ChatBotSDK.TypingIndicatorData, Swift.Never>
  final public let connectionStatusChanged: Combine.PassthroughSubject<ChatBotSDK.WebSocketConnectionStatus, Swift.Never>
  final public let eventsReceived: Combine.PassthroughSubject<[ChatBotSDK.SocketEvent], Swift.Never>
  final public let aiChunksReceived: Combine.PassthroughSubject<ChatBotSDK.AiChunkData, Swift.Never>
  @_Concurrency.MainActor public func connect(botPublishKey: Swift.String, visitorKey: Swift.String, conversationKey: Swift.String?)
  @_Concurrency.MainActor public func disconnect()
  @_Concurrency.MainActor public func sendMessage(_ message: ChatBotSDK.WebSocketMessage)
  @_Concurrency.MainActor public func sendVisitorJoin(payload: [Swift.String : Any])
  @_Concurrency.MainActor public func sendTypingIndicator(conversationKey: Swift.String, isTyping: Swift.Bool)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum WebSocketConnectionStatus {
  case disconnected
  case connecting
  case connected
  case reconnecting
  public static func == (a: ChatBotSDK.WebSocketConnectionStatus, b: ChatBotSDK.WebSocketConnectionStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebSocketMessage : Swift.Codable {
  public let type: Swift.String
  public let data: ChatBotSDK.WebSocketMessageData?
  public init(type: Swift.String, data: ChatBotSDK.WebSocketMessageData?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebSocketMessageData : Swift.Codable {
  public let content: Swift.String?
  public let conversationKey: Swift.String?
  public let sender: ChatBotSDK.EventSender?
  public let timestamp: Swift.Int64?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventsData : Swift.Codable {
  public let events: [ChatBotSDK.EventItem]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventItem : Swift.Codable {
  public let conversationKey: Swift.String?
  public let sender: ChatBotSDK.EventSender?
  public let timestamp: Swift.Int64?
  public let assignee: ChatBotSDK.EventAssignee?
  public let publishKey: Swift.String?
  public let messageId: Swift.String?
  public let type: Swift.String?
  public let payload: ChatBotSDK.EventPayload?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventSender : Swift.Codable {
  public let email: Swift.String?
  public let id: Swift.Int?
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let type: Swift.String?
  public let imageUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventAssignee : Swift.Codable {
  public let email: Swift.String?
  public let id: Swift.Int?
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let type: Swift.String?
  public let imageUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventPayload : Swift.Codable {
  public let payload: ChatBotSDK.WebSocketMessageData?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ChatBotSDK.ParsedMessageType : Swift.Equatable {}
extension ChatBotSDK.ParsedMessageType : Swift.Hashable {}
extension ChatBotSDK.ParsedMessageType : Swift.RawRepresentable {}
extension ChatBotSDK.ParsedMessageSender : Swift.Equatable {}
extension ChatBotSDK.ParsedMessageSender : Swift.Hashable {}
extension ChatBotSDK.ParsedMessageSender : Swift.RawRepresentable {}
extension ChatBotSDK.ParsedMessageStatus : Swift.Equatable {}
extension ChatBotSDK.ParsedMessageStatus : Swift.Hashable {}
extension ChatBotSDK.ParsedMessageStatus : Swift.RawRepresentable {}
extension ChatBotSDK.ChatNavigationView : Swift.Sendable {}
extension ChatBotSDK.FullScreenChatView : Swift.Sendable {}
extension ChatBotSDK.ChatHomeView : Swift.Sendable {}
extension ChatBotSDK.ChatSettingsView : Swift.Sendable {}
extension ChatBotSDK.SVGImageView : Swift.Sendable {}
extension ChatBotSDK.SimpleSVGView : Swift.Sendable {}
extension ChatBotSDK.AvatarImageView : Swift.Sendable {}
extension ChatBotSDK.SVGDebugView : Swift.Sendable {}
extension ChatBotSDK.ConversationDetailHeaderView : Swift.Sendable {}
extension ChatBotSDK.ConversationStatus : Swift.Equatable {}
extension ChatBotSDK.ConversationStatus : Swift.Hashable {}
extension ChatBotSDK.ConversationStatus : Swift.RawRepresentable {}
extension ChatBotSDK.ParticipantType : Swift.Equatable {}
extension ChatBotSDK.ParticipantType : Swift.Hashable {}
extension ChatBotSDK.ParticipantType : Swift.RawRepresentable {}
extension ChatBotSDK.ConversationListView : Swift.Sendable {}
extension ChatBotSDK.FullScreenConversationListView : Swift.Sendable {}
extension ChatBotSDK.OptionsDrawer : Swift.Sendable {}
extension ChatBotSDK.ApiConstants.Environment : Swift.Equatable {}
extension ChatBotSDK.ApiConstants.Environment : Swift.Hashable {}
extension ChatBotSDK.ApiConstants.Environment : Swift.RawRepresentable {}
extension ChatBotSDK.SocketManager : Swift.Sendable {}
extension ChatBotSDK.SocketConnectionStatus : Swift.Equatable {}
extension ChatBotSDK.SocketConnectionStatus : Swift.Hashable {}
extension ChatBotSDK.SocketConnectionStatus : Swift.RawRepresentable {}
extension ChatBotSDK.QueuedMessageType : Swift.Equatable {}
extension ChatBotSDK.QueuedMessageType : Swift.Hashable {}
extension ChatBotSDK.ChatEndedView : Swift.Sendable {}
extension ChatBotSDK.RealtimeMessageService : Swift.Sendable {}
extension ChatBotSDK.MarkdownTestView : Swift.Sendable {}
extension ChatBotSDK.ConversationHeaderView : Swift.Sendable {}
extension ChatBotSDK.WotNotSDK : Swift.Sendable {}
extension ChatBotSDK.MessageInputView : Swift.Sendable {}
extension ChatBotSDK.MarkdownHTMLText : Swift.Sendable {}
extension ChatBotSDK.MarkdownHTMLTextWithFallback : Swift.Sendable {}
extension ChatBotSDK.MarkdownText : Swift.Sendable {}
extension ChatBotSDK.MarkdownTextWithFallback : Swift.Sendable {}
extension ChatBotSDK.ConversationDetailView : Swift.Sendable {}
extension ChatBotSDK.MessageType : Swift.Equatable {}
extension ChatBotSDK.MessageType : Swift.Hashable {}
extension ChatBotSDK.MessageType : Swift.RawRepresentable {}
extension ChatBotSDK.SenderType : Swift.Equatable {}
extension ChatBotSDK.SenderType : Swift.Hashable {}
extension ChatBotSDK.SenderType : Swift.RawRepresentable {}
extension ChatBotSDK.MessageStatus : Swift.Equatable {}
extension ChatBotSDK.MessageStatus : Swift.Hashable {}
extension ChatBotSDK.MessageStatus : Swift.RawRepresentable {}
extension ChatBotSDK.AttachmentType : Swift.Equatable {}
extension ChatBotSDK.AttachmentType : Swift.Hashable {}
extension ChatBotSDK.AttachmentType : Swift.RawRepresentable {}
extension ChatBotSDK.EndConversationDrawer : Swift.Sendable {}
extension ChatBotSDK.SDKInitializationView : Swift.Sendable {}
extension ChatBotSDK.WebSocketConnectionStatus : Swift.Equatable {}
extension ChatBotSDK.WebSocketConnectionStatus : Swift.Hashable {}
